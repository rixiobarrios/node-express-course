Create a file in the starter directory called QuizAnswers2.txt. Put answers to the following questions in it.

1. In this lesson, you created a middleware function called asyncWrapper. Why?
Answer: The asyncWrapper function can be used to wrap asynchronous middleware functions, allowing them to properly handle promises by catching both synchronous exceptions and asynchronous rejections.

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    return next(createCustomError(`No task with id: ${taskID}`, 404));
  }  
  res.status(200).json({ task });  
});  

As you will see in the lessons that follow, you do not have to always create the asyncWrapper middleware, because you can instead use an NPM package called express-async-errors that provides the same capability.